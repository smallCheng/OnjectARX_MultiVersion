===============================================================================================

本文档由 GrayWolf 于2017-09-13整理：

===============================================================================================

64位 win7 + VS2015 + ObjectARX2017 的项目配置

A：建项目

--> 新建项目 --> 模板 --> Visual C++ --> Win32 --> Win32项目 --> 输入名称 "FirstProject" --> DLL --> 预编译头 --> 完成


B：设置项目的活动解决方案

--> 在“生成菜单”里的“配置管理器”或者从项目属性页的右上角点开“配置管理器”。

--> 首先选择活动解决方案配置(即编写代码时的环境配置方案以及编译时的当前有效活动配置方案)，

--> 活动解决方案配置默认有 Debug/Release,不要去动它，动了它后期切换平台时可能会出现“选定内容没有属性页”之类的提示，


--> 如果要编译多版本，就在配置管理器的活动解决方案配置里新建自己的方案，例如:ReleaseR21.0 ReleaseR20.1等等********************************

--> 建议先建一套低版本 32位的活动方案配置，且将项目属性的明细配置好，编译通过后再建其它版本的方案。

--> 新建方案时，会提示从何处复制设置，如果前面已经设置过一些解决方案，且有些基本设置相同的，可以从其方案中复制过来，再修改一些细节设置即可。

--> 活动解决方案平台，此时默认即可，一般不用设置，如果还有 ARM 之类的其它目标机器，可以在里新建添加。

--> 添加好活动解决方案之后，再回到项目属性页来设置各配置方案对应平台下的各项设置


C：设置各活动解决方案在相应平台下的明细项目属性

--> 项目属性页

--> 配置--> ReleaseR21.0/Release/其它 --> 平台选 x64/win32/ARM(指的是目标机器)

--> 这里也可以选择所有配置或多重配置 + 所有平台/单选平台，就是说多个方案下的相同设置可以一起设，


C.a：

--> 配置属性-->常规

	目标平台版本-->8.1

        输出目录-->D:\00--VS2015+ObjectARX2017\JoyModel\jmkernel 后面别加\，加了\在多版本输出时就会都输出到 jmkernel 目录下了,否则会建很多同名目录。
     
        中间目录-->$ 符号要加，否则清理解决方案时老是提示，烦得很。

                     如果设了目录，编译时就会自动生成很多同名目录,多版本输出时同输出目录一样，可以加\将中间文件都输出到同一个目录下。

        目录文件名-->根据自己的需求来设置，也可以引用编译器变量来组合设置。

	目标文件扩展名-->设为.arx
	
	平台工具集-->Visual Studio 2015 (v140)-->后期批量编译时根据需求自动选择(v140 v110 v100 v90 v80等)

	配置类型-->动态库(.dll)

	MFC的使用-->在共享DLL中使用MFC

	字符集-->使用Unicode字符集

	公共语言支行时支持-->无公共语言支行时支持

        全程序优化-->使用链接时间代码生成

	其它默认配置即可

C.b：

--> 配置属性-->C/C++

	常规-->附加包含目录-->D:\Autodesk_ObjectARX_2017\inc-x64   D:\Autodesk_ObjectARX_2017\inc 根据版本不同分别设置相关的引用目录

	其它#using指令-->这里是CAD的安装路径 D:\Program Files\Autodesk\AutoCAD 2017  这个可以不填，不影响编译。
	
	警告等级-->等级1(/W1) ,低点好，高了警告太多-->烦。

C.c：

--> 配置属性-->C/C++-->预处理器及代码生成

        预处理器-->预处理器定义 JMARXVER=21064 不要有空格，相当于在当前活动配置的文档里加进“#define JMARXVER 21064”语句

        以便后期选择编译某段代码
        
        **不要定义Debug的宏，当用 Release 生成目标时，delete 对象时内存出错 

        代码生成-->

        较小类型检查-->否

        基本运行时检查-->默认值

	代码生成-->运行库-->多线程DLL(/MD)

        启用函数级链接-->是(/Gy)

C.d：

--> 配置属性-->C/C++-->预编译头

	预编译头-->使用(/Yu)

        预编译头文件-->stdafx.h

C.e：

--> 配置属性-->链接器

	常规-->附加库目录，例如：“D:\Autodesk_ObjectARX_2017\lib-x64”

        常规-->链接库依赖项-->是

        常规-->使用库依赖项输入-->是

C.f：

--> 配置属性-->链接器

        输入-->附加依赖项

// (R21.0版本的)

acad.lib
rxapi.lib
accore.lib
acgiapi.lib
acdb21.lib
acge21.lib
ac1st21.lib

       这些加进去，这里要注意修改每个方案需要的lib

C.h：

--> 链接器-->高级-->目标计算机-->MachineX64 (/MACHINE:X64) 或者X86  这一条会自动设置，前面选择平台时就定下，这里确认下就行


D：添加def模块定义文件和程序代码.cpp

--> 在源文件的右键菜单里-->添加-->新建项-->代码-->def模块定义文件

	LIBRARY
	EXPORTS  
	acrxEntryPoint PRIVATE 
	acrxGetApiVersion PRIVATE

	将以上内容添加进def模板文件

E：点击“生成”菜单下的“生成解决方案”或者“编译”即可完成第一个项目的目标编译工作。

   批量编译选择“生成”菜单下的“批生成”，然后选择要生成的项目配置，点击生成，完成编译工作。

=====================================================================================================================================

老司机可以利用其它工具通过修改“项目名.vcxproj”的xml文件来设置相关活动方案的明细设置，然后调用msbuild的批处理程序来执行命令行批量编译

也可以用批处理程序.bat分别给msbuild批处理程序不同的参数来批量编译不同的项目
